---
http_interactions:
- request:
    method: get
    uri: https://docs.q-ctrl.com/control-operations#m%C3%B8lmer-s%C3%B8rensen-drive
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; HTML Proofer/3.9.2; +https://github.com/gjtorikian/html-proofer)
      Accept:
      - application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 28 Nov 2018 20:32:13 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=db2714355bc502ddf766bd922b457d22c1543437132; expires=Thu, 28-Nov-19
        20:32:12 GMT; path=/; domain=.q-ctrl.com; HttpOnly; Secure
      Last-Modified:
      - Wed, 28 Nov 2018 06:31:49 GMT
      Access-Control-Allow-Origin:
      - "*"
      Expires:
      - Wed, 28 Nov 2018 20:37:56 GMT
      Cache-Control:
      - max-age=600
      X-GitHub-Request-Id:
      - 65D8:2C27:1783:1E1F:5BFEFA4B
      Via:
      - 1.1 varnish
      Age:
      - '0'
      X-Served-By:
      - cache-fra19135-FRA
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1543437133.995107,VS0,VE98
      Vary:
      - Accept-Encoding
      X-Fastly-Request-ID:
      - cf994fef9f1aaf7b8bb96fd206b5df448723a091
      Expect-CT:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      CF-RAY:
      - 480f9a410bc6beda-FRA
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: '1.1'
    adapter_metadata:
      effective_url: https://docs.q-ctrl.com/control-operations
  recorded_at: Wed, 28 Nov 2018 20:32:01 GMT
recorded_with: VCR 2.9.3
